Step 1: Implement the Functions

// Calculate the final price after applying a discount
function calculateDiscount(price, discount) {
    if (price < 0 || discount < 0 || discount > 100) {
        throw new Error('Invalid input');
    }
    return price - (price * discount / 100);
}

// Filter a list of products by a search query
function filterProducts(products, query) {
    if (!Array.isArray(products) || typeof query !== 'string') {
        throw new Error('Invalid input');
    }
    return products.filter(product =>
        product.name.toLowerCase().includes(query.toLowerCase())
    );
}

// Sort a list of products by a specified key
function sortProducts(products, key) {
    if (!Array.isArray(products) || !['name', 'price'].includes(key)) {
        throw new Error('Invalid input');
    }
    return [...products].sort((a, b) => {
        if (key === 'name') {
            return a.name.localeCompare(b.name);
        }
        return a.price - b.price;
    });
}

module.exports = { calculateDiscount, filterProducts, sortProducts };


Step 2: Write Unit Tests



functions.test.js


const { calculateDiscount, filterProducts, sortProducts } = require('../src/functions');

describe('calculateDiscount', () => {
    test('calculates the correct discounted price', () => {
        expect(calculateDiscount(100, 10)).toBe(90);
        expect(calculateDiscount(200, 25)).toBe(150);
    });

    test('throws an error for invalid input', () => {
        expect(() => calculateDiscount(-100, 10)).toThrow('Invalid input');
        expect(() => calculateDiscount(100, -10)).toThrow('Invalid input');
        expect(() => calculateDiscount(100, 110)).toThrow('Invalid input');
    });

    test('returns the original price if discount is 0', () => {
        expect(calculateDiscount(100, 0)).toBe(100);
    });
});

describe('filterProducts', () => {
    const products = [
        { name: 'Laptop', price: 1000 },
        { name: 'Smartphone', price: 500 },
        { name: 'Tablet', price: 300 }
    ];

    test('filters products by query', () => {
        expect(filterProducts(products, 'Laptop')).toEqual([{ name: 'Laptop', price: 1000 }]);
        expect(filterProducts(products, 'smart')).toEqual([{ name: 'Smartphone', price: 500 }]);
    });

    test('returns an empty array if no products match', () => {
        expect(filterProducts(products, 'Watch')).toEqual([]);
    });

    test('throws an error for invalid input', () => {
        expect(() => filterProducts(null, 'Laptop')).toThrow('Invalid input');
        expect(() => filterProducts(products, null)).toThrow('Invalid input');
    });
});

describe('sortProducts', () => {
    const products = [
        { name: 'Laptop', price: 1000 },
        { name: 'Smartphone', price: 500 },
        { name: 'Tablet', price: 300 }
    ];

    test('sorts products by name', () => {
        const sortedByName = [
            { name: 'Laptop', price: 1000 },
            { name: 'Smartphone', price: 500 },
            { name: 'Tablet', price: 300 }
        ];
        expect(sortProducts(products, 'name')).toEqual(sortedByName);
    });

    test('sorts products by price', () => {
        const sortedByPrice = [
            { name: 'Tablet', price: 300 },
            { name: 'Smartphone', price: 500 },
            { name: 'Laptop', price: 1000 }
        ];
        expect(sortProducts(products, 'price')).toEqual(sortedByPrice);
    });

    test('throws an error for invalid input', () => {
        expect(() => sortProducts(null, 'name')).toThrow('Invalid input');
        expect(() => sortProducts(products, 'weight')).toThrow('Invalid input');
    });
});




